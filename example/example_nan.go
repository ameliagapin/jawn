// Code generated by "nan -pkg example -json -jsoniter -easyjson ../../example/structs.go ../../example/structs_easyjson.go"; DO NOT EDIT.

package example

import (
	"bytes"
	"encoding/json"
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// NullMyStruct - generated for NullMyStruct
//easyjson:skip
type NullMyStruct struct {
	MyStruct
	Valid bool // Valid is true if Value is not NULL
}

func NanMyStruct(v MyStruct) NullMyStruct {
	return NullMyStruct{MyStruct: v, Valid: true}
}

func (n NullMyStruct) IsValid() bool {
	return n.Valid
}

// MarshalJSON - marshaller for json
func (n NullMyStruct) MarshalJSON() ([]byte, error) {
	if !n.Valid {
		return []byte("null"), nil
	}

	return json.Marshal(n.MyStruct)
}

// UnmarshalJSON - unmarshaller for json
func (n *NullMyStruct) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, []byte("null")) {
		*n = NullMyStruct{}
		return nil
	}

	var res MyStruct

	err := json.Unmarshal(data, &res)
	if err != nil {
		return err
	}

	*n = NullMyStruct{MyStruct: res, Valid: true}

	return nil
}

func init() {
	jsoniter.RegisterTypeDecoderFunc(
		"example.NullMyStruct",
		func(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
			if iter.ReadNil() {
				return
			}

			var val MyStruct
			iter.ReadVal(&val)

			*((*NullMyStruct)(ptr)) = NullMyStruct{MyStruct: val, Valid: true}
		},
	)
	jsoniter.RegisterTypeEncoderFunc(
		"example.NullMyStruct",
		func(ptr unsafe.Pointer, stream *jsoniter.Stream) {
			n := *((*NullMyStruct)(ptr))

			if !n.Valid {
				stream.WriteNil()
				return
			}

			stream.WriteVal(n.MyStruct)
		},
		nil,
	)
}

// MarshalEasyJSON - marshaller for easyjson
func (n NullMyStruct) MarshalEasyJSON(out *jwriter.Writer) {
	if !n.Valid {
		out.RawString("null")
		return
	}

	n.MyStruct.MarshalEasyJSON(out) // EasyJSON template
}

// UnmarshalEasyJSON - unmarshaller for easyjson
func (n *NullMyStruct) UnmarshalEasyJSON(in *jlexer.Lexer) {
	if in.IsNull() {
		*n = NullMyStruct{}

		in.Skip()

		return
	}

	var val MyStruct

	val.UnmarshalEasyJSON(in) // EasyJSON template

	*n = NullMyStruct{MyStruct: val, Valid: true}
}
